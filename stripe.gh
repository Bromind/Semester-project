#ifndef STRIPE
#define STRIPE

#include "chinese_remainder_th.gh"
#include "gcd.gh"
#include "up_to_conversions.gh"
#include "nth_prop.gh"
#include "stdex.gh"
#include <nat.gh>

fixpoint bool is_n(nat n, nat i) {
  return n == i;
}

fixpoint bool is_none(option<nat> opt)
{
  return opt == none;
}

fixpoint bool is_some(option<nat> opt)
{
  return !is_none(opt);
}

fixpoint bool is_zero(nat n) {
  return is_n(zero, n);
}

fixpoint bool is_not_zero(nat n) {
 return is_n(zero, n) == true ? false : true;
}

fixpoint list<option<nat> > gen_none(nat capa)
{
  switch(capa) {
    case(zero): return nil;
    case succ(p_capa): return cons(none, gen_none(p_capa));
  }
}

 
fixpoint bool opt_less_than_n(nat n, option<nat> opt_i)
{
  switch(opt_i) {
    case none: return true;
    case some(i): return int_of_nat(n) >= int_of_nat(i);
  }
}

fixpoint bool opt_not_zero(option<nat> opt_i)
{
  switch(opt_i) {
    case none: return true;
    case some(i): return i != zero;
  }
}

fixpoint bool lst_opt_less_than_n(list<option<nat> > lst, nat n, int index)
{
  return opt_less_than_n(n, nth(index, lst));
}

fixpoint bool lst_opt_not_zero(list<option<nat> > lst, int index)
{
  return opt_not_zero(nth(index, lst));
}
 
lemma void gen_none_less_than(nat capa, nat n)
requires true;
ensures true == forall(gen_none(capa), (opt_less_than_n)(n));
{
  switch(capa) {
    case(zero): ;
    case succ(p_capa): gen_none_less_than(p_capa, n);
  }
}

lemma void gen_none_l(nat capa)
requires true;
ensures length(gen_none(capa)) == int_of_nat(capa)
	&*& true == forall(gen_none(capa), is_none) 
	&*& count_some(gen_none(capa)) == zero
	&*& true == forall(gen_none(capa), opt_not_zero);
{
  switch(capa) {
    case(zero): ;
    case succ(p_capa): gen_none_l(p_capa);
  }
}

fixpoint nat count_some(list<option<nat> > lst) {
  switch(lst) {
    case nil: return zero;
    case cons(hd, tl): return hd == none ? count_some(tl) : succ(count_some(tl));
  }
}

lemma void count_some_less_than_length(list<option<nat> > lst)
requires true;
ensures int_of_nat(count_some(lst)) <= length(lst);
{
  switch(lst) {
    case nil:
    case cons(hd, tl): count_some_less_than_length(tl);
  }
}

lemma void count_some_forall(list<option<nat> > lst)
requires count_some(lst) == nat_of_int(length(lst));
ensures true == forall(lst, is_some);
{
  switch(lst){
    case nil: 
    case cons(hd, tl): {
      if(is_some(hd) == false){
        count_some_less_than_length(tl);
        assert false;
      }
      assert count_some(lst) == succ(count_some(tl));
      assert length(tl) + 1 == length(lst);
      assert succ(nat_of_int(length(tl))) == succ(count_some(tl));
      count_some_forall(tl);
    }
  }
}
 
fixpoint int stripe(int start, int step, nat n, int capa) {
  switch(n) {
    case zero: return start;
    case succ(m): return (stripe(start, step, m, capa) + step) % capa;
  }
}

fixpoint bool list_contains_stripes_helper(list<option<nat> > lst, int start, int step, int index, option<nat> content) {
   switch(content){
    case none: return true;
    case some(n): return stripe(start, step, n, length(lst)) == index;
  }
}

fixpoint bool list_contains_stripes(list<option<nat> > lst, int start, int step, int index) {
  return list_contains_stripes_helper(lst, start, step, index, nth(index, lst));
}

lemma void stripe_less_than_capa(int start, int step, nat n, int capa)
requires start < capa &*& start >= 0 &*& step >= 0;
ensures stripe(start, step, n, capa) >= 0 &*& stripe(start, step, n, capa) < capa;
{
  switch(n) {
    case zero: 
    case succ(m): {
      stripe_less_than_capa(start, step, m, capa);
      div_mod_gt_0(stripe(start, step, n, capa), stripe(start, step, m, capa) + step, capa);
    }
  }
}

lemma void list_none_less_than_n(list<option<nat> > lst, nat n, nat bound)
requires true == forall(lst, (opt_less_than_n)(n)) &*& int_of_nat(bound) <= length(lst);
ensures true == up_to(bound, (lst_opt_less_than_n)(lst, n));
{
  switch(bound){
    case zero: 
    case succ(p_bound): {
      list_none_less_than_n(lst, n, p_bound);
      switch(nth(int_of_nat(p_bound), lst)) {
        case none: 
        case some(val): {
          forall_nth(lst, (opt_less_than_n)(n), int_of_nat(p_bound));
        }
      }
    }
  }
}

lemma void list_none_contains_stripes(list<option<nat> > lst, int start, int step, nat u_bound)
requires true == forall(lst, is_none) &*& int_of_nat(u_bound) <= length(lst);
ensures true == up_to(u_bound, (list_contains_stripes)(lst, start, step));
{
  switch(u_bound) {
    case zero: {}
    case succ(u_bound_p): {
      list_none_contains_stripes(lst, start, step, u_bound_p);
      switch(nth(int_of_nat(u_bound_p), lst)) {
        case none: {
          assert true == list_contains_stripes(lst, start, step, int_of_nat(u_bound_p));
          assert true == up_to(u_bound_p, (list_contains_stripes)(lst, start, step));
          assert true == up_to(u_bound, (list_contains_stripes)(lst, start, step));
        }
        case some(a): {
          forall_nth(lst, is_none, int_of_nat(u_bound_p));
        }
      }
    }
  }
}

lemma void count_some_incr(list<option<nat> > lst, int index_update, nat new_val, nat sum)
requires count_some(lst) == sum &*& nth(index_update, lst) == none &*& index_update < length(lst) &*& index_update >= 0;
ensures count_some(update(index_update, some(new_val), lst)) == succ(sum);
{
  switch(lst) {
    case nil: 
    case cons(hd, tl): {
    nat prev_sum;
      switch(hd) {
        case none: prev_sum = sum;
        case some(m): {
          switch(sum) {
            case zero: assert false;
            case succ(p_sum): prev_sum = p_sum;
          }
        }
      }
      
      if(index_update == 0){
      } else {
        count_some_incr(tl, index_update - 1, new_val, prev_sum);
      }
    }
  }
}

lemma void updated_list_contains_stripes(list<option<nat> > lst, int start, int step, nat n, nat bound)
requires true == up_to(bound, (list_contains_stripes)(lst, start, step)) &*& int_of_nat(bound) <= length(lst) &*& start >= 0 &*& start < length(lst) &*& step >= 0;
ensures true == up_to(bound, (list_contains_stripes)(update(stripe(start, step, n, length(lst)), some(n), lst), start, step));
{
  switch(bound) {
    case zero: 
    case succ(p_bound): {
      updated_list_contains_stripes(lst, start, step, n, p_bound);
      if(stripe(start, step, n, length(lst)) == int_of_nat(p_bound)) {
        nth_update(int_of_nat(p_bound), stripe(start, step, n, length(lst)), some(n), lst);
      } else {
        stripe_less_than_capa(start, step, n, length(lst));
        nth_update(int_of_nat(p_bound), stripe(start, step, n, length(lst)), some(n), lst);         
        switch(nth(int_of_nat(p_bound), lst)){
          case none: 
          case some(content):            
        }
      }
    }
  }
}

lemma void updated_list_less_than_n(list<option<nat> > lst, int start, int step, nat m, nat bound)
requires true == up_to(bound, (lst_opt_less_than_n)(lst, m)) &*& int_of_nat(bound) <= length(lst) &*& start >= 0 &*& start < length(lst) &*& step >= 0;
ensures true == up_to(bound, (lst_opt_less_than_n)(update(stripe(start, step, succ(m), length(lst)), some(succ(m)), lst), succ(m)));
{
  switch(bound) {
    case zero: 
    case succ(p_bound): {
      updated_list_less_than_n(lst, start, step, m, p_bound);
      if(stripe(start, step, succ(m), length(lst)) == int_of_nat(p_bound)) {
        nth_update(int_of_nat(p_bound), stripe(start, step, succ(m), length(lst)), some(succ(m)), lst);
      } else {
        stripe_less_than_capa(start, step, succ(m), length(lst));
        nth_update(int_of_nat(p_bound), stripe(start, step, succ(m), length(lst)), some(succ(m)), lst);
        switch(nth(int_of_nat(p_bound), lst)) {
          case none: 
          case some(content):
        }
      }
    }
  }
}

lemma void updated_list_not_zero_up_to(list<option<nat> > lst, int start, int step, nat m, nat bound)
requires true == up_to(bound, (forall_fp_to_up_to_fp)(opt_not_zero, lst)) &*& int_of_nat(bound) <= length(lst) &*& start >= 0 &*& start < length(lst) &*& step >= 0;
ensures true == up_to(bound, (forall_fp_to_up_to_fp)(opt_not_zero, update(stripe(start, step, succ(m), length(lst)), some(succ(m)), lst)));
{
  switch(bound) {
    case zero:
    case succ(p_bound): {
      updated_list_not_zero_up_to(lst, start, step, m, p_bound);
      option<nat> content_at_pbound = nth(int_of_nat(p_bound), update(stripe(start, step, succ(m), length(lst)), some(succ(m)), lst));
      
      if(stripe(start, step, succ(m), length(lst)) == int_of_nat(p_bound)) {
        nth_update(int_of_nat(p_bound), stripe(start, step, succ(m), length(lst)), some(succ(m)), lst);
        assert content_at_pbound == some(succ(m));
        assert true == opt_not_zero(nth(int_of_nat(p_bound), update(stripe(start, step, succ(m), length(lst)), some(succ(m)), lst)));
      } else {
        stripe_less_than_capa(start, step, succ(m), length(lst));
        nth_update(int_of_nat(p_bound), stripe(start, step, succ(m), length(lst)), some(succ(m)), lst);
        assert content_at_pbound == nth(int_of_nat(p_bound), lst);
      }
      
      assert true == up_to(bound, (forall_fp_to_up_to_fp)(opt_not_zero, update(stripe(start, step, succ(m), length(lst)), some(succ(m)), lst)));
    }
  }
}

lemma void updated_list_not_zero_forall(list<option<nat> > lst, int start, int step, nat m)
requires true == forall(lst, opt_not_zero) &*& start >= 0 &*& start < length(lst) &*& step >= 0;
ensures true == forall(update(stripe(start, step, succ(m), length(lst)), some(succ(m)), lst), opt_not_zero);
{
  list<option<nat> > new_lst = update(stripe(start, step, succ(m), length(lst)), some(succ(m)), lst);
  
  forall_to_up_to_length(lst, lst, opt_not_zero);
  
  updated_list_not_zero_up_to(lst, start, step, m, nat_of_int(length(lst)));
  
  up_to_length_to_forall(new_lst, 0, new_lst, opt_not_zero);
}

lemma void stripe_to_arith(int start, int step, nat n, int capa)
requires start < capa &*& start >= 0 &*& step >= 0;
ensures stripe(start, step, n, capa) == (start + int_of_nat(n)*step)%capa;
{
  switch(n) {
    case zero: {
      assert stripe(start, step, zero, capa) == start;
      division_round_to_zero(start, capa);
      div_rem(start, capa);
      assert start == (start + 0*step)%capa;
    }
    case succ(p_n): {
      stripe_to_arith(start, step, p_n, capa);
      assert stripe(start, step, p_n, capa) == (start+int_of_nat(p_n)*step)%capa;
      assert stripe(start, step, n, capa) == ((start + int_of_nat(p_n)*step)%capa + step)%capa;
      assert start >= 0;
      mul_nonnegative(int_of_nat(p_n), step);
      mod_add(start + int_of_nat(p_n)*step, step, capa);
      assert stripe(start, step, n, capa) == (start + int_of_nat(p_n)*step + step) % capa;
      assert stripe(start, step, n, capa) == (start + (int_of_nat(p_n) + 1) * step) % capa;
      assert int_of_nat(p_n)+1 == int_of_nat(succ(p_n));
      mul_subst(int_of_nat(p_n) + 1, int_of_nat(n), step);
      assert stripe(start, step, n, capa) == (start + int_of_nat(n)*step) % capa;
    }
  }
}


lemma void CRT_pred(int length_lst, int step, int diff, int start) 
requires stripe(start, step, zero, length_lst) == stripe(start, step, nat_of_int(diff), length_lst) 
	&*& diff >= 0 
	&*& step >= 0 
	&*& start < length_lst 
	&*& start >= 0;
ensures 0 == (diff*step)%length_lst;
{
  stripe_to_arith(start, step, zero, length_lst);
  stripe_to_arith(start, step, nat_of_int(diff), length_lst);
  mul_subst(int_of_nat(nat_of_int(diff)), diff, step);
  mul_subst(int_of_nat(zero), 0, step);
  
  assert stripe(start, step, zero, length_lst) == start;
  division_round_to_zero(start, length_lst);
  div_rem(start, length_lst);
  assert start == start%length_lst;
  assert start == start + int_of_nat(zero)*step;
  assert stripe(start, step, zero, length_lst) == (start + int_of_nat(zero)*step)%length_lst;
  assert true == ((start + (0*step))%length_lst == (start + diff*step)%length_lst);
  assert 0*step == 0;
  division_round_to_zero(0, length_lst);
  div_rem(0, length_lst);
  
  mul_nonnegative(diff, step);
  assert start == (start + diff*step)%length_lst;
  mod_add(diff*step, start, length_lst);
  assert true == ((start + diff*step)%length_lst == (start + (diff*step)%length_lst)%length_lst);
  div_rem(diff*step, length_lst);
  assert true == ((diff*step)%length_lst < length_lst);
  mod_eq_sub(0, (diff*step)%length_lst, length_lst, start);
  assert 0%length_lst == ((diff*step)%length_lst)%length_lst;
  mod_add(diff*step, 0, length_lst);
}

lemma void decrease_one_step_stripe(int start, int step, nat val1, nat val2, int capa)
requires stripe(start, step, succ(val1), capa) == stripe(start, step, succ(val2), capa) &*& int_of_nat(val1) < int_of_nat(val2) &*& capa > 0 &*& step < capa &*& step > 0 &*& start < capa &*& start >= 0;
ensures stripe(start, step, val1, capa) == stripe(start, step, val2, capa);
{
  assert stripe(start, step, succ(val1), capa) == (stripe(start, step, val1, capa) + step) % capa;
  assert stripe(start, step, succ(val2), capa) == (stripe(start, step, val2, capa) + step) % capa;
  
  stripe_less_than_capa(start, step, val1, capa);
  stripe_less_than_capa(start, step, val2, capa);
  
  mod_eq_sub(stripe(start, step, val1, capa), stripe(start, step, val2, capa), capa, step);
  
  division_round_to_zero(stripe(start, step, val1, capa), capa);
  div_rem(stripe(start, step, val1, capa), capa);
  
  division_round_to_zero(stripe(start, step, val2, capa), capa);
  div_rem(stripe(start, step, val2, capa), capa);
  
}

lemma void decrease_stripe(int start, int step, nat val1, nat val2, int capa, int diff)
requires stripe(start, step, val1, capa) == stripe(start, step, val2, capa) &*& int_of_nat(val2) == int_of_nat(val1) + diff &*& diff > 0 &*& capa > 0 &*& step < capa &*& step > 0 &*& start < capa &*& start >= 0;
ensures stripe(start, step, zero, capa) == stripe(start, step, nat_of_int(diff), capa);
{
  switch(val1) {
    case zero: assert val2 == nat_of_int(diff);
    case succ(p_val1): {
      assert val2 == succ(?p_val2);
      decrease_one_step_stripe(start, step, p_val1, p_val2, capa);
      decrease_stripe(start, step, p_val1, p_val2, capa, diff);
    }
  }
}


fixpoint list<option<nat> > stripe_l_fp(int start, int step, nat n, int capa)
{
  switch(n) {
    case zero: return gen_none(nat_of_int(capa));
    case succ(m): return update(stripe(start, step, n, capa), some(n), stripe_l_fp(start, step, m, capa));
  }
}

lemma list<option<nat> > stripe_l(int start, int step, nat n, int capa)
requires 0 <= start &*& start < capa &*& step > 0 &*& int_of_nat(n) <= capa &*& coprime(step, capa) &*& step < capa;
ensures count_some(result) == n
	&*& length(result) == capa
	&*& true == up_to(nat_of_int(capa), (list_contains_stripes)(result, start, step))
	&*& true == up_to(nat_of_int(capa), (lst_opt_less_than_n)(result, n))
	&*& true == forall(result, opt_not_zero)
	&*& result == stripe_l_fp(start, step, n, capa)
	&*& coprime(step, capa);
{
  switch(n) {
    case zero: {
      list<option<nat> > lst = gen_none(nat_of_int(capa));
      gen_none_l(nat_of_int(capa));
      list_none_contains_stripes(lst, start, step, nat_of_int(length(lst)));
      gen_none_less_than(nat_of_int(capa), n);
      list_none_less_than_n(lst, zero, nat_of_int(capa));
      return lst;
    }
    case succ(m): {
      list<option<nat> > lst = stripe_l(start, step, m, capa);
      assert true == forall(lst, opt_not_zero);
      assert count_some(lst) == m;
      switch(nth(stripe(start, step, n, capa), lst))
      {
        case some(prev_val): {
          int index = stripe(start, step, n, capa);
          stripe_less_than_capa(start, step, n, capa);
          forall_nth(lst, opt_not_zero, stripe(start, step, n, capa));
          assert prev_val != zero;
          int diff = int_of_nat(n) - int_of_nat(prev_val);
          up_to_covers_x(nat_of_int(length(lst)), (lst_opt_less_than_n)(lst, m), index);
          assert diff >= 0;
          up_to_covers_x(nat_of_int(length(lst)), (list_contains_stripes)(lst, start, step), index);
          
          assert true == list_contains_stripes(lst, start, step, index);
          assert stripe(start, step, prev_val, capa) == stripe(start, step, n, capa);
          decrease_stripe(start, step, prev_val, n, capa, diff);
          
          CRT_pred(length(lst), step, diff, start);
          assert 0 == (diff*step)%length(lst) &*& diff < length(lst);
          
          // from CRT
          decrease_mod_0(nat_of_int(diff), step);
          assert diff == int_of_nat(nat_of_int(diff));
          mul_subst(diff, int_of_nat(nat_of_int(diff)), step);
          assert 0 == (diff*step)%step;
          decrease_mod_0(nat_of_int(diff), step);
          mul_mono_strict(diff, capa, step);
          bin_chinese_remainder_theorem(step, capa, diff*step);
          assert diff > 0;
          assert step > 0;
          mul_positive(diff, step);
          assert false;
        }
        
        case none:
      }
      list<option<nat> > new_lst = update(stripe(start, step, n, capa), some(n), lst); // Get a new list 
      stripe_less_than_capa(start, step, n, capa);
      count_some_incr(lst, stripe(start, step, n, capa), n, m);
      updated_list_contains_stripes(lst, start, step, n, nat_of_int(capa));
      updated_list_less_than_n(lst, start, step, m, nat_of_int(capa));
      updated_list_not_zero_forall(lst, start, step, m);
      return new_lst;
    }
  }
}




lemma void loop_fp_pos(int k, int capacity)
requires k >= 0 &*& capacity > 0;
ensures loop_fp(k, capacity) == k%capacity;
{
  mod_rotate(k, capacity);
  assert true == ((k+capacity)%capacity == k%capacity);
  assert loop_fp(k, capacity) == (k%capacity + capacity)%capacity;
  mod_add(k, capacity, capacity);
  assert loop_fp(k, capacity) == (k+capacity)%capacity;
  
}

// if a cell is some in stripe_l_fp, and strideNthProp hold up to an higher bound, then prop holds for that cell
lemma void stride_to_stripe<t>(int start, int step, nat bound_stripe, nat bound_stride, int capa, int n, fixpoint(t, bool) prop, list<t> lst)
requires true == up_to(bound_stride, (stride_nth_prop)(lst, prop, capa, start, step)) 
	&*& int_of_nat(bound_stripe) < int_of_nat(bound_stride) 
	&*& 0 <= n &*& n < capa &*& 0 <= start &*& start < capa &*& step > 0 &*& int_of_nat(bound_stripe) <= capa &*& coprime(step, capa) &*& step < capa;
ensures coprime(step, capa) 
	&*& true == (true == is_some(nth(n, stripe_l_fp(start, step, bound_stripe, capa))) ? nthProp(lst, prop, n) : true);
{
  switch(bound_stripe) {
    case zero: {
      // Prove all none;
      list<option<nat> > lst_none = stripe_l(start, step, bound_stripe, capa);
      assert lst_none == gen_none(nat_of_int(capa));
      gen_none_l(nat_of_int(capa));
      assert length(lst_none) == capa;
      assert n < capa;
      assert int_of_nat(nat_of_int(n)) == n;
      forall_fp_to_fp(lst_none, is_none, nat_of_int(n));
      assert false == is_some(nth(n, stripe_l_fp(start, step, bound_stripe, capa)));
    }
    case succ(p_bound_stripe): {
      list<option<nat> > lst_stripe = stripe_l(start, step, bound_stripe, capa);  
      switch(nth(n, stripe_l_fp(start, step, bound_stripe, capa))) {
        case none: assert false == is_some(nth(n, stripe_l_fp(start, step, bound_stripe, capa)));
        case some(n_s): {
          int nb_steps = int_of_nat(n_s);
          assert true == up_to(nat_of_int(capa), (lst_opt_less_than_n)(lst_stripe, bound_stripe));
          up_to_weak(nat_of_int(capa), succ(nat_of_int(n)), (lst_opt_less_than_n)(lst_stripe, bound_stripe));
          assert lst_opt_less_than_n(lst_stripe, bound_stripe, n) == true;
          assert nb_steps <= int_of_nat(bound_stripe) &*& int_of_nat(bound_stripe) <= int_of_nat(bound_stride);
          
          up_to_weak(nat_of_int(capa), succ(nat_of_int(n)), (list_contains_stripes)(lst_stripe, start, step));
          stripe_to_arith(start, step, n_s, capa);
          assert n == (start + step*nb_steps) % capa;
          
          up_to_weak(bound_stride, succ(n_s), (stride_nth_prop)(lst, prop, capa, start, step));
          assert stride_nth_prop(lst, prop, capa, start, step, nb_steps) == true;
          
          
          assert true == nthProp(lst, prop, loop_fp(start + step*nb_steps, capa));
          
          mul_nonnegative(step, nb_steps);
          loop_fp_pos(start + step * nb_steps, capa);
          assert loop_fp(start + step * nb_steps, capa) == (start + step*nb_steps)%capa;
        }
      }
    }
  }
}

#endif
