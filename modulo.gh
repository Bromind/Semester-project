#ifndef _MODULO_GH_INCLUDED_
#define _MODULO_GH_INCLUDED_

#include "arith.gh"
#include "nth_prop.gh"


 
lemma void div_mod(int g, int k, int l)
requires g == (k % l) &*& l > 0;
ensures (-l <= g) &*& (g < l);
{
  div_rem(k, l);
}

lemma void div_mod_gt_0(int mod, int div, int whole)
requires mod == (div % whole) &*& whole > 0 &*& div >= 0;
ensures (0 <= mod) &*& (mod < whole);
{
  div_rem(div, whole);
}

fixpoint int loop_fp(int k, int capacity) {
  return ((k%capacity + capacity)%capacity);
}

lemma void loop_lims(int k, int capacity)
requires 0 < capacity;
ensures 0 <= loop_fp(k, capacity) &*& loop_fp(k, capacity) < capacity;
{
  div_rem(k, capacity);
  assert(-capacity <= k%capacity);
  assert(0 <= k%capacity + capacity);
  div_rem((k + capacity), capacity);
  assert(capacity > 0);
  div_rem(k%capacity + capacity, capacity);
  assert(0 <= ((k%capacity + capacity)%capacity));
}

lemma void bar(int a, int b, int q, int r)
requires 0 <= a &*& a < b &*& 0 <= r &*& a == q * b + r &*& r < b;
ensures q == 0;
{
  if (q == 0) {
  } else if (0 <= q) {
    mul_mono(1, q, b);
  } else {
    mul_mono(q, -1, b);
  }
}

lemma void quotidient_zero_pos(int a, int b, int q, int r)
requires 0 <= a &*& a < b &*& 0 <= r &*& a == q * b + r &*& r < b;
ensures q == 0;
{
  if (q == 0) {
  } else if (0 <= q) {
    mul_mono(1, q, b);
  } else {
    mul_mono(q, -1, b);
  }
}

lemma void quotidient_zero_neg(int a, int b, int q, int r)
requires -b < a &*& a <= 0 &*& -b < r &*& a == q * b + r &*& r <= 0;
ensures q == 0;
{
  if (q == 0) {
  } else if (0 <= q) {
    mul_mono(1, q, b);
  } else {
    mul_mono(q, -1, b);
  }
}

lemma void division_round_to_zero(int a, int b)
requires -b < a &*& a < b;
ensures a/b == 0;
{
  div_rem(a, b);
  if (0 <= a)
    quotidient_zero_pos(a, b, a / b, a % b);
  else
    quotidient_zero_neg(a, b, a / b, a % b);
}

lemma void div_incr(int a, int b)
requires 0 <= a &*& 0 < b;
ensures true == ( (a+b)/b == a/b + 1 );
{
  div_rem(a+b, b);
  if ((a+b)/b <= a/b) {
    div_rem(a, b);
    mul_mono((a+b)/b, a/b, b);
    assert true == ((a+b)/b*b <= a/b*b);
    assert false;
  }

  assert a/b + 1 <= (a+b)/b;
  assert 0 <= a;
  div_rem(a, b);
  if (a/b <= -1) {
    mul_mono(a/b, -1, b);
    assert(false);
  }
  assert 0 <= (a/b);
  if (a/b + 1 <= (a+b)/b - 1) {
    mul_mono(a/b + 1, (a+b)/b - 1, b);
    assert(false);
  }
}

lemma void loop_bijection(int k, int capacity)
requires 0 <= k &*& k < capacity;
ensures loop_fp(k, capacity) == k;
{
  division_round_to_zero(k, capacity);
  div_rem(k, capacity);
  div_incr(k, capacity);
  div_rem((k + capacity), capacity);
}

lemma void mod_rotate(int a, int b)
requires 0 <= a &*& 0 < b;
ensures true == ((a+b)%b == a%b);
{
  div_rem(a+b, b);
  div_rem(a, b);
  div_incr(a, b);
  mul_subst((a+b)/b, (a/b + 1), b);
}



lemma void mod_add(int a, int b, int mod)
requires mod > 0 &*& a >= 0 &*& b >= 0;
ensures true == (((a%mod) + b)%mod == (a+b)%mod);
{
  if(a < mod) 
  {
    division_round_to_zero(a, mod);
    div_rem(a, mod);
  } else {
    div_rem(a, mod);
    int d = a/mod;
    assert a == d * mod + a%mod;
    div_rem(b, mod);
    int e = b/mod;
    assert b == e * mod + b%mod;
    
    assert a+b == d * mod + a%mod + e*mod + b%mod;
    assert a%mod + b == a%mod + e*mod + b%mod;
    
    int i = 0;
    
    if(d < 0){
      quotient_positive(a, mod);
    } else {
      for(; i < d; i++)
      invariant true == ((i*mod + a%mod + e*mod + b%mod) % mod == (a%mod + e*mod + b%mod) % mod)
    	&*& true == ((i*mod + a%mod + e*mod + b%mod) >= 0)
      	&*& i <= d;
      decreases d-i;
      {
        mod_rotate((i*mod + a%mod + e*mod + b%mod), mod);
        assert true == ((i*mod + a%mod + e*mod + b%mod) % mod == (i*mod + a%mod + e*mod + b%mod + mod) %mod);
        assert true == ((i+1)*mod == i*mod + mod);
      }
      assert i == d;
    }
  }
}

lemma void mod_succ_zero_helper(int a, int mod)
requires a%mod == mod - 1 &*& mod > 0 &*& a >= 0 &*& a < mod;
ensures 0 == (a+1)%mod;
{
  division_round_to_zero(a, mod);
  div_rem(a, mod);
  assert a%mod == a;
  assert a == mod - 1;
  assert a+1 == mod;
  division_round_to_zero(0, mod);
  div_incr(0, mod);
  assert true == ((a+1)/mod == 1);
  mul_subst((a+1)/mod, 1, mod);
  
  div_rem(a+1, mod);
  assert a+1 == (a+1)/mod * mod + (a+1)%mod;
  assert a+1 == mod;
  assert 1*mod == (a+1)/mod * mod;
  assert true == ((a+1)%mod == 0);
}
 
lemma void mod_succ_zero(int a, int mod)
requires a%mod == mod - 1 &*& mod > 0 &*& a >= 0;
ensures 0 == (a+1)%mod;
{
  if(a < mod) {
    mod_succ_zero_helper(a, mod);
  } else {
    int i = a;
    for(;i >= mod; i = i - mod) 
    invariant mod-1 == i % mod
    	&*& i >= 0
    	&*& true == ((a+1)%mod == (i+1) % mod);
    decreases i;
    {
      assert i >= mod;
      assert i - mod >= 0;
      mod_rotate(i-mod, mod);
      assert i%mod == (i-mod) % mod;
      
      mod_rotate(i-mod+1, mod);
    }
    assert i%mod == a%mod;
    assert i%mod == mod - 1;
    assert i >= 0;
    assert i < mod;
    mod_succ_zero_helper(i, mod);
    mod_rotate(a-mod+1, mod);
    assert 0 == (a-mod + 1) % mod;
  }
}

lemma void div_eq_helper(int a, int b)
requires true == (a%b >= 0) &*& true == (a%b < b - 1) &*& b > 1 &*& a >= 0 &*& a < b;
ensures true == ((a+1)/b == a/b);
{
    division_round_to_zero(a, b);
    div_rem(a, b);
    assert a == a%b;
    assert a+1 < b;
    division_round_to_zero(a+1, b);
    div_rem(a+1, b);
}

lemma void div_eq(int a, int b)
requires true == (a%b >= 0) &*& true == (a%b < b - 1) &*& b > 1 &*& a >= 0;
ensures true == ((a+1)/b == a/b);
{
  if(a < b) {
    div_eq_helper(a, b);
  } else {
    int i = 0;
    assert true == (a%b >= 0);
    division_round_to_zero(a%b, b);
    div_rem(a%b, b);
    div_eq_helper(a%b, b);
    assert true == ((a%b)/b == (a%b+1)/b);
    quotient_positive(a, b);
    
    for(; i < a/b; i++)
    invariant true == ((i*b + a%b)/b == (i*b + a%b + 1)/b)
    	&*& i <= a/b
    	&*& i*b + a%b >= 0;
    decreases a/b - i;
    {
      div_incr(i*b+a%b, b);
      div_incr(i*b+a%b+1, b);
      assert i*b+b == (i+1)*b;
    }
    assert i == a/b;
    assert true == ((a/b*b + a%b)/b == (a/b*b + a%b + 1)/b);
    div_rem(a, b);
    assert a/b == (a+1)/b;
  }
}

lemma void mod_of_succ_eq_succ_of_mod(int a, int mod)
requires a%mod != mod - 1 &*& mod > 0 &*& a >= 0;
ensures true == (a%mod + 1 == (a+1)%mod);
{
  div_rem(a+1, mod);
  div_rem(a, mod);
  div_mod(a%mod, a, mod);
  
  assert true == (a%mod < mod - 1);
  div_mod_gt_0(a%mod, a, mod);
  assert true == (a%mod >= 0);
  div_eq(a, mod);
  mul_subst(a/mod, (a+1)/mod, mod);
  
  assert true == ((a/mod * mod) == ((a+1)/mod * mod));
  
  assert a+1 == (a/mod * mod) + (a+1)%mod;
  assert a+1 == (a/mod * mod) + a%mod + 1;
  assert a%mod + 1 == (a+1) % mod;
}
 
lemma void mod_pred_eq(int a, int b, int mod)
requires true == ((a+1)%mod == (b+1)%mod) &*& a >= 0 &*& b >= 0 &*& mod > 0;
ensures a%mod == b%mod;
{
  div_mod_gt_0((a+1)%mod, a+1, mod);
  assert true == ((a+1)%mod >= 0);
  assert true == ((b+1)%mod >= 0);
  
  if(a%mod != b%mod)
  {
    if(a%mod == mod - 1) {
      mod_succ_zero(a, mod);
      assert 0 == (a+1)%mod;
      assert b%mod != mod - 1;
      mod_of_succ_eq_succ_of_mod(b, mod);
      assert true == ((b+1)%mod == b%mod + 1);
      div_mod_gt_0(b%mod, b, mod);
      assert 0 <= b%mod;
      assert true == ((b+1)%mod > 0);
      assert true == ((a+1)%mod != (b+1)%mod);
      assert false;
    } else {
      if(b%mod == mod - 1) {
        mod_succ_zero(b, mod);
        mod_of_succ_eq_succ_of_mod(a, mod);
        div_mod_gt_0(a%mod, a, mod);
      } else {
        assert a%mod != mod - 1;
        div_mod_gt_0(a%mod, a, mod);
        assert a%mod >= 0;
        assert a%mod < mod - 1;
        mod_of_succ_eq_succ_of_mod(a, mod);
        assert true == ((a+1)%mod == a%mod + 1);
        
        assert true == (b%mod != mod - 1);
        div_mod_gt_0(b%mod, b, mod);
        assert true == (b%mod < mod - 1);
        mod_of_succ_eq_succ_of_mod(b, mod);
        assert true == ((b+1)%mod == b%mod + 1);
        
        assert true == (a%mod + 1 != b%mod + 1);
        assert false;
      }
    }
  }
}



lemma void decrease_mod_0(nat a, int b)
requires b > 0;
ensures 0 == (int_of_nat(a)*b)%b;
{
  switch(a){
    case zero: div_rem(int_of_nat(a), b); 
    case succ(p_a): {
      decrease_mod_0(p_a, b);
      mul_nonnegative(int_of_nat(p_a), b);
      mod_rotate(int_of_nat(p_a)*b, b);
      
      mul_distrib(int_of_nat(p_a), b);
      succ_int(int_of_nat(p_a));
      assert int_of_nat(p_a)*b + b == (int_of_nat(p_a) + 1) * b;
      mul_subst(int_of_nat(a), int_of_nat(p_a) + 1, b);
      assert int_of_nat(a) == int_of_nat(p_a) + 1;
      assert int_of_nat(p_a) * b + b == int_of_nat(a) * b;
    }
  }
}

lemma void mod_eq_sub(int a, int b, int mod, int incr)
requires true == ((a+incr)%mod == (b+incr)%mod) &*& a >= 0 &*& b >= 0 &*& incr >= 0 &*& incr < mod &*& a < mod &*& b < mod;
ensures true == (a%mod == b%mod);
{
  int i = incr;
  for(; i > 0; i--)
  invariant true == ((a+i)%mod == (b+i)%mod) &*& i >= 0;
  decreases i;
  {
    mod_pred_eq(a+i-1, b+i-1, mod);
  }
  assert i == 0;
}

lemma void div_multiple(int n1, int n2)
requires n1 >= 0 &*& n2 > 0;
ensures n1*n2/n2 == n1;
{
  int i = 0;
  assert 0*n2 == 0;
  division_round_to_zero(0, n2);
  for(; i < n1; i++)
  invariant i <= n1
  	&*& i >= 0
  	&*& i*n2/n2 == i;
  decreases n1 - i;
  {
    mul_nonnegative(i, n2);
    div_incr(i*n2, n2);
    assert i+1 == ((i*n2)+n2)/n2;
  }
}

lemma void loop_injection(int k, int capacity)
requires 0 <= k &*& 0 < capacity;
ensures loop_fp(k + capacity, capacity) == loop_fp(k, capacity);
{
  mod_rotate(k, capacity);
}

lemma void loop_injection_minus_n(int k, int capacity, int n)
requires 0 <= k &*& 0 < capacity &*& 0 <= k + n*capacity &*& n < 0;
ensures loop_fp(k + n*capacity, capacity) == loop_fp(k, capacity);
{
  int i = n;
  for (i = n; i < 0; ++i)
  invariant loop_fp(k + i*capacity, capacity) == loop_fp(k + n*capacity, capacity) &*&
            0 <= k + i*capacity &*&
            i <= 0;
  decreases -i;
  {
    mod_rotate(k + i*capacity, capacity);
    assert loop_fp(k + i*capacity, capacity) == loop_fp(k + n*capacity, capacity);
  }
  assume(loop_fp(k + i*capacity, capacity) == loop_fp(k + n*capacity, capacity));//workaround
  assert loop_fp(k + i*capacity, capacity) == loop_fp(k + n*capacity, capacity);
}


lemma void loop_injection_n(int k, int capacity, int n)
requires 0 <= k &*& 0 < capacity &*& 0 <= k + n*capacity;
ensures loop_fp(k + n*capacity, capacity) == loop_fp(k, capacity);
{
  if (0 <= n) {
    for (int i = 0; i < n; ++i)
    invariant loop_fp(k + i*capacity, capacity) == loop_fp(k, capacity) &*&
              0 <= k + i*capacity &*&
              i <= n;
    decreases n-i;
    {
      mod_rotate(k + i*capacity, capacity);
    }
  } else {
    loop_injection_minus_n(k, capacity, n);
  }
}

lemma void loop_fixp(int k, int capacity)
requires 0 <= k &*& 0 < capacity;
ensures loop_fp(k, capacity) == loop_fp(loop_fp(k, capacity), capacity);
{
  loop_lims(k, capacity);
  loop_bijection(loop_fp(k, capacity), capacity);
}

predicate save_for_now(bool x) = x;

lemma void mod_bijection(int x, int y)
requires -y < x &*& x < y;
ensures x == x%y;
{
  division_round_to_zero(x, y);
  div_rem(x, y);
}

lemma int loop_shift_inv(int x, int y, int capacity)
requires 0 <= x &*& x < capacity &*& 0 <= y &*& y < capacity;
ensures 0 <= result &*& result < capacity &*&
        loop_fp(result + y, capacity) == x;
{
  int z = loop_fp(y - x, capacity);
  loop_lims(y - x, capacity);
  if (z == 0) {
    assert true == (((y-x)%capacity + capacity)%capacity == 0);
    div_rem(y-x, capacity);
    if (1 <= (y-x)%capacity) {
      mod_rotate((y-x)%capacity, capacity);
      assert true == (0 == ((y-x)%capacity%capacity));
      division_round_to_zero((y-x)%capacity, capacity);
      div_rem((y-x)%capacity, capacity);
      assert false;
    }

    if ((y-x)%capacity <= -1) {
      assert (-capacity < (y-x)%capacity);
      assert true == (0 <= (y-x)%capacity + capacity);
      division_round_to_zero((y-x)%capacity + capacity, capacity);
      mul_subst(((y-x)%capacity + capacity)/capacity, 0, capacity);
      assert true == (((y-x)%capacity + capacity)/capacity*capacity == 0);
      div_rem((y-x)%capacity + capacity, capacity);
    }
    assert true == ((y-x)%capacity == 0);//TADA!!!

    int n1 = (y-x)/capacity;
    div_rem(y-x, capacity);
    assert true == (y-x == n1*capacity);
    int n = -n1;
    assert true == (x-y == n*capacity);
    assert true == (x == n*capacity + y);
    division_round_to_zero(x, capacity);
    div_rem(x, capacity);
    assert true == (x%capacity == x);
    assert true == (x == (n*capacity + y)%capacity);
    assert true == (x + capacity == (n*capacity + y)%capacity + capacity);
    mod_rotate(x, capacity);
    assert true == ((x+capacity)%capacity == x);
    assert true == (x == ((n*capacity + y)%capacity + capacity)%capacity);

    loop_injection_n(y, capacity, n);
    assert true == ((y - x) == (y - x)/capacity*capacity);
    assert true == (((y%capacity) + capacity)%capacity == x);
    assert(loop_fp(y, capacity) == x);
    return 0;
  } else {
    assert(z == ((y-x)%capacity + capacity)%capacity);
    assert(0 < z);
    assert(z < capacity);
    assert(0 <= (capacity - z + y));

    if (0 <= y-x) {
      div_rem(y-x, capacity);
      assert true == (0 <= (y-x)%capacity);
      mod_rotate((y-x)%capacity, capacity);
      mod_bijection((y-x)%capacity, capacity);
      assert true == ((y-x)%capacity == ((y-x)%capacity + capacity)%capacity);

      if (y-x < capacity) {
        mod_bijection((y-x), capacity);
        assert true == ((y-x)%capacity == y-x);

        mod_rotate(x, capacity);
        mod_bijection(x, capacity);
        assert true == (x == (capacity + x)%capacity);
        mod_rotate((capacity + x)%capacity, capacity);
        mod_bijection((capacity + x)%capacity, capacity);
        assert true == (x == (((capacity + x)%capacity + capacity)%capacity));
      } else {
        div_rem(y-x, capacity);
        int n = (y-x)/capacity;
        int r = (y-x)%capacity;
        assert true == (y-x == n*capacity + r);


        mod_rotate(x, capacity);
        mod_bijection(x, capacity);
        assert true == (x == (capacity + x)%capacity);
        mod_rotate((capacity + x)%capacity, capacity);
        mod_bijection((capacity + x)%capacity, capacity);
        assert true == (x == (((capacity + x)%capacity + capacity)%capacity));

        if (0 <= capacity + y - r) {
          if (capacity + y - r < capacity) {
            mod_rotate_n(capacity + y - r, -n, capacity);
          } else {
            assert false;
          }
        } else {
          assert false;
        }

      }

    } else {
      assert true == (y-x < 0);
      assert true == (-capacity < y-x);

      mod_bijection(y-x, capacity);
      assert true == ((y-x)%capacity == y-x);
      mod_bijection((y-x) + capacity, capacity);
      mod_bijection(x, capacity);
      mod_rotate(x, capacity);
      assert true == (x == ((x%capacity + capacity)%capacity));
    }
    assert true == (((capacity - z + y)%capacity + capacity)%capacity == x);
    return capacity - z;
  }

}

fixpoint bool byLoopNthProp<t>(list<t> arr, fixpoint (t, bool) prop,
                               int cap, int shift, int index) {
  return nthProp(arr, prop, loop_fp(index + shift, cap));
}

fixpoint bool stride_nth_prop<t>(list<t> arr, fixpoint (t, bool) prop, 
                              int cap, int entry, int offset, int index) {
  return nthProp(arr, prop, loop_fp(entry + offset * index, cap));
}

lemma void by_loop_for_all<t>(list<t> arr, fixpoint (t, bool) prop,
                              int shift, int capacity, nat outlen)
requires length(arr) == capacity &*& int_of_nat(outlen) <= capacity &*&
         0 <= shift &*& shift < capacity &*&
         true == up_to(nat_of_int(capacity),
                       (byLoopNthProp)(arr, prop, capacity, shift));
ensures true == up_to(outlen, (nthProp)(arr, prop));
{
  switch(outlen) {
    case zero: return;
    case succ(len):
      by_loop_for_all(arr, prop, shift, capacity, len);
      int orig = loop_shift_inv(int_of_nat(len), shift, capacity);
      up_to_covers_x(nat_of_int(capacity),
                     (byLoopNthProp)(arr, prop, capacity, shift),
                     orig);
      assert(true == byLoopNthProp(arr, prop, capacity, shift, orig));
      assert(true == nthProp(arr, prop, int_of_nat(len)));
  }
}

#endif//_MODULO_GH_INCLUDED_
