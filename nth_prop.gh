#ifndef _NTH_PROP_GH_INCLUDED_
#define _NTH_PROP_GH_INCLUDED_

#include <nat.gh>

fixpoint bool nthProp<t>(list<t> arr, fixpoint (t, bool) prop, int index) {
  return prop(nth(index, arr));
}

fixpoint bool up_to(nat n, fixpoint (int, bool) prop) {
  switch(n) {
    case zero: return true;
    case succ(m): return prop(int_of_nat(m)) && up_to(m, prop);
  }
}

fixpoint bool up_to_by_incr_and_start(nat n, nat incr, nat start, fixpoint(int, bool) prop) {
  switch(n) {
    case zero: return true;
    case succ(m): return prop(int_of_nat(incr) * int_of_nat(n) + int_of_nat(start)) && up_to_by_incr_and_start(m, incr, start, prop);
  }
}

lemma void up_to_covers_x(nat n, fixpoint (int, bool) prop, int x)
requires true == up_to(n, prop) &*& 0 <= x &*& x < int_of_nat(n);
ensures true == prop(x);
{
  switch(n) {
    case zero: return;
    case succ(m):
      if (x == int_of_nat(m)) {
        return;
      } else {
        up_to_covers_x(m, prop, x);
      }
  }
}

lemma void nat_diff_int_diff(nat n1, nat n2)
requires n1 != n2;
ensures int_of_nat(n1) != int_of_nat(n2);
{
  switch(n1){
    case zero:
    case succ(p1): {
      switch(n2) {
        case zero:
        case succ(p2): nat_diff_int_diff(p1, p2);
      }
    }
  }
}

lemma void up_to_weak(nat bound, nat new_bound, fixpoint(int, bool) prop)
requires true == up_to(bound, prop) &*& int_of_nat(new_bound) <= int_of_nat(bound);
ensures true == up_to(new_bound, prop);
{
  switch(bound){
    case zero: assert new_bound == zero;
    case succ(p_bound): {
      if(new_bound == bound){
      } else {
        nat_diff_int_diff(bound, new_bound);
        assert int_of_nat(bound) != int_of_nat(new_bound);
        up_to_weak(p_bound, new_bound, prop);
      }
    }
  }
}

fixpoint bool shiftNthProp<t>(list<t> arr, fixpoint (t, bool) prop,
                              int shift, int index) {
  return nthProp(arr, prop, shift + index);
}

lemma void shift_for_all<t>(list<t> arr, fixpoint (t, bool) prop,
                            int shift, int inlen, nat outlen)
requires length(arr) == inlen &*& 0 <= shift &*&
         shift + int_of_nat(outlen) <= inlen &*&
         true == up_to(nat_of_int(inlen), (nthProp)(arr, prop));
ensures true == up_to(outlen, (shiftNthProp)(arr, prop, shift));
{
  switch(outlen) {
    case zero: return;
    case succ(len):
      shift_for_all(arr, prop, shift, inlen, len);
      up_to_covers_x(nat_of_int(inlen), (nthProp)(arr, prop),
                     int_of_nat(len)+shift);
  }
}

lemma void shift_for_append<t>(list<t> l1, list<t> l2,
                               fixpoint (t, bool) prop,
                               nat outlen)
requires true == up_to(nat_of_int(length(l2)),
                       (shiftNthProp)(append(l1,l2), prop, length(l1))) &*&
         int_of_nat(outlen) <= length(l2);
ensures true == up_to(outlen, (nthProp)(l2, prop));
{
  switch(outlen) {
    case zero: return;
    case succ(len):
      shift_for_append(l1, l2, prop, len);
      up_to_covers_x(nat_of_int(length(l2)),
                     (shiftNthProp)(append(l1,l2), prop, length(l1)),
                     int_of_nat(len));
      nth_append_r(l1, l2, int_of_nat(len));
  }
}

#endif//_NTH_PROP_GH_INCLUDED_
