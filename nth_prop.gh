#ifndef _NTH_PROP_GH_INCLUDED_
#define _NTH_PROP_GH_INCLUDED_

#include <nat.gh>

  fixpoint bool nthProp<t>(list<t> arr, fixpoint (t, bool) prop, int index) {
    return prop(nth(index, arr));
  }

  fixpoint bool up_to(nat n, fixpoint (int, bool) prop) {
    switch(n) {
      case zero: return true;
      case succ(m): return prop(int_of_nat(m)) && up_to(m, prop);
    }
  }

  fixpoint bool up_to_by_incr_and_start(nat n, nat incr, nat start, fixpoint(int, bool) prop) {
    switch(n) {
      case zero: return true;
      case succ(m): return prop(int_of_nat(incr) * int_of_nat(n) + int_of_nat(start)) && up_to_by_incr_and_start(m, incr, start, prop);
    }
  }

  lemma void up_to_covers_x(nat n, fixpoint (int, bool) prop, int x)
  requires true == up_to(n, prop) &*& 0 <= x &*& x < int_of_nat(n);
  ensures true == prop(x);
  {
    switch(n) {
      case zero: return;
      case succ(m):
        if (x == int_of_nat(m)) {
          return;
        } else {
          up_to_covers_x(m, prop, x);
        }
    }
  }

  fixpoint bool shiftNthProp<t>(list<t> arr, fixpoint (t, bool) prop,
                                int shift, int index) {
    return nthProp(arr, prop, shift + index);
  }

  lemma void shift_for_all<t>(list<t> arr, fixpoint (t, bool) prop,
                              int shift, int inlen, nat outlen)
  requires length(arr) == inlen &*& 0 <= shift &*&
           shift + int_of_nat(outlen) <= inlen &*&
           true == up_to(nat_of_int(inlen), (nthProp)(arr, prop));
  ensures true == up_to(outlen, (shiftNthProp)(arr, prop, shift));
  {
    switch(outlen) {
      case zero: return;
      case succ(len):
        shift_for_all(arr, prop, shift, inlen, len);
        up_to_covers_x(nat_of_int(inlen), (nthProp)(arr, prop),
                       int_of_nat(len)+shift);
    }
  }

  lemma void shift_for_append<t>(list<t> l1, list<t> l2,
                                 fixpoint (t, bool) prop,
                                 nat outlen)
  requires true == up_to(nat_of_int(length(l2)),
                         (shiftNthProp)(append(l1,l2), prop, length(l1))) &*&
           int_of_nat(outlen) <= length(l2);
  ensures true == up_to(outlen, (nthProp)(l2, prop));
  {
    switch(outlen) {
      case zero: return;
      case succ(len):
        shift_for_append(l1, l2, prop, len);
        up_to_covers_x(nat_of_int(length(l2)),
                       (shiftNthProp)(append(l1,l2), prop, length(l1)),
                       int_of_nat(len));
        nth_append_r(l1, l2, int_of_nat(len));
    }
  }

#endif//_NTH_PROP_GH_INCLUDED_
