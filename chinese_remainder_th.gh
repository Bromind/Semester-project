#ifndef CHINESE_REMAINDER_TH
#define CHINESE_REMAINDER_TH

#include "up_to_conversions.gh"
#include "arith.gh"
#include "nth_prop.gh"
#include "modulo.gh"
#include "gcd.gh"
#include "boolean_fixpoints.gh"
#include "protect.gh"
#include "divisors.gh"
#include "list_lemma.gh"
#include "list_merge_and.gh"
#include <nat.gh>
#include <list.gh>

lemma void close_mul_assoc(int n1, int n2, int n3)
  requires n2 >= 0;
  ensures protect(n1*n2*n3 == n2*n3*n1);
{
  mul_assoc(n1, n2, n3);
  close protect(n1*n2*n3 == n2*n3*n1);
}

predicate is_prime(int n) = n > 1 &*& true == up_to(nat_of_int(n), 
  (or)(
    (or)((equals)(0), (equals)(1)),
    (not)((divide)(n))
    )
  );

fixpoint int smallest_prime_divisor_helper(int n, int i, nat bound)
{
  switch(bound) {
    case zero: return 0;
    case succ(p_bound): return divide(n, i) == true ? i : smallest_prime_divisor_helper(n, i+1, p_bound);
  }
}

fixpoint int smallest_prime_divisor(int n)
{
  return smallest_prime_divisor_helper(n, 2, nat_of_int(n+1));
}

lemma void smallest_prime_divisor_l(int n, int i, nat bound)
requires int_of_nat(bound) > n-i &*& n > 1 &*& i >= 2 &*& i <= n &*&
  smallest_prime_divisor_helper(n, 2, nat_of_int(n+1)) == 
    smallest_prime_divisor_helper(n, i, nat_of_int(n+3-i)) &*&
  true == up_to(nat_of_int(i), 
  (or)(
    (or)((equals)(0), (equals)(1)),
    (not)((divide)(n))
    )
  );
  
ensures smallest_prime_divisor(n) >= 2 &*& 
  smallest_prime_divisor(n) <= n &*&
  true == divide(n, smallest_prime_divisor(n)) &*& 
  smallest_prime_divisor(n) == i ? true : true == not((divide)(n), i) &*&
  true == up_to(nat_of_int(i), 
  (or)(
    (or)((equals)(0), (equals)(1)),
    (not)((divide)(n))
    )
  );
{
  switch(bound) {
    case zero: {
      assert n - i < 0;
      assert i < n;
    }
    case succ(p_bound): {
      if(nat_of_int(n+3-i) == zero)
      {
        int_of_nat_of_int(n+3-i);
        assert false;
      }
      if(i == n) {
        divide_itself(n);
        assert nat_of_int(n+3-i) == succ(?a);
        assert smallest_prime_divisor_helper(n, i, nat_of_int(n+3-i)) == n;
        if(smallest_prime_divisor(n) < n){
          assert smallest_prime_divisor(n) == smallest_prime_divisor_helper(n, 2, nat_of_int(n+1));
          assert false;
        }
      } else {
        if(true == divide(n, i)) {
          assert i >= 2;
          assert nat_of_int(n+3-i) == succ(?a);
          assert smallest_prime_divisor_helper(n, i, nat_of_int(n+3-i)) >= 2;
        } else { // i doesn't divide n
          assert n - (i+1) == n - i - 1;
          assert n - i - 1 < int_of_nat(p_bound);
          assert succ(nat_of_int(n+3-i-1)) == nat_of_int(n+3-i);
          assert smallest_prime_divisor_helper(n, i, nat_of_int(n+3-i)) == 
            smallest_prime_divisor_helper(n, i+1, nat_of_int(n+3-i-1));
          
          assert true == or(
            (or)((equals)(0), (equals)(1)),
            (not)((divide)(n)),
            i
          );
          
          assert true == up_to(nat_of_int(i), 
            (or)(
              (or)((equals)(0), (equals)(1)),
              (not)((divide)(n))
            )
          );
          
          assert int_of_nat(nat_of_int(i)) == i;
          
          assert true == up_to(succ(nat_of_int(i)), 
            (or)(
              (or)((equals)(0), (equals)(1)),
              (not)((divide)(n))
            )
          );
          
          smallest_prime_divisor_l(n, i+1, p_bound);
        }
      }
    }
  }
}

fixpoint list<int> prime_factor_decomposition(int n, nat bound) {
  switch(bound) {
    case zero: return nil;
    case succ(p_bound): 
      return n == 1 ? cons(1, nil) : cons(smallest_prime_divisor(n), 
        prime_factor_decomposition(n/smallest_prime_divisor(n), p_bound));
  }
}

lemma void pfd_contains_to_divide(int n, int prime_divisor, nat bound) 
requires true == list_contains(prime_divisor, prime_factor_decomposition(n, bound)) &*& int_of_nat(bound) > n; 
ensures true == divide(n, prime_divisor);
{
  assume(false);
  list<int> pfd = prime_factor_decomposition(n, nat_of_int(n+1));
  switch(pfd) {
    case nil: assert false;
    case cons(hd, tl): {
      assert hd == smallest_prime_divisor(n);
      up_to_prime_intro();
      smallest_prime_divisor_l(n, 2, nat_of_int(n-2+1));
      assert true == divide(n, hd);
      if(prime_divisor == hd) {
        assert prime_divisor == hd;
        assert true == divide(n, prime_divisor);
      } else {
        assert n/hd*hd == n;
        pfd_contains_to_divide(n/hd, prime_divisor, p_bound);
        assert divide(n/hd, prime_divisor);
        assert true == ((n/hd)/prime_divisor * prime_divisor == n/hd);
        assert true == ((n/hd*hd)/prime_divisor*prime_divisor == n);
      }
    }
  }
}

fixpoint int prod_list(list<int> lst)
{
  switch(lst) {
    case nil: return 1;
    case cons(i, tl): return i*prod_list(tl);
  }
}

lemma void up_to_prime_intro(int n)
requires true;
ensures true == up_to(nat_of_int(2), 
  (or)(
    (or)((equals)(0), (equals)(1)),
    (not)((divide)(n))
    )
  );
{
  assert true == up_to(zero, 
  (or)(
    (or)((equals)(0), (equals)(1)),
    (not)((divide)(n))
    )
  );
  
  assert true == or(
    (or)((equals)(0), (equals)(1)),
    (not)((divide)(n)),
    0
    );
    
  assert int_of_nat(succ(zero)) == 1;
  true == up_to(succ(zero), 
  (or)(
    (or)((equals)(0), (equals)(1)),
    (not)((divide)(n))
    )
  );
    
    
  assert true == or(
    (or)((equals)(0), (equals)(1)),
    (not)((divide)(n)),
    1
    );
    
  assert int_of_nat(succ(succ(zero))) == 2;
  true == up_to(succ(succ(zero)), 
  (or)(
    (or)((equals)(0), (equals)(1)),
    (not)((divide)(n))
    )
  );
}

lemma void prime_factor_rec(int n, nat bound)
requires n > 1 &*& int_of_nat(bound) > n;
ensures n/smallest_prime_divisor(n) < n &*&
  n/smallest_prime_divisor(n) >= 1;
{
  up_to_prime_intro(n);
  smallest_prime_divisor_l(n, 2, nat_of_int(n-2+1));
  assert true == divide(n, smallest_prime_divisor(n));
  assume(n/smallest_prime_divisor(n) * smallest_prime_divisor(n) == n);
  assert n/smallest_prime_divisor(n) * smallest_prime_divisor(n) == n;
  assert smallest_prime_divisor(n) >= 2;

  if(n/smallest_prime_divisor(n) >= n) {
    mul_mono(n, n/smallest_prime_divisor(n), smallest_prime_divisor(n));
    up_to_prime_intro(n);
    smallest_prime_divisor_l(n, 2, nat_of_int(n-2+1));
    assert true == divide(n, smallest_prime_divisor(n));
    assert n*smallest_prime_divisor(n) <= n/smallest_prime_divisor(n)*smallest_prime_divisor(n);

    if(smallest_prime_divisor(n) > 1)
    {
      mul_mono_strict(1, smallest_prime_divisor(n), n);
      assert n < smallest_prime_divisor(n)*n;
      assume(false);
      assert false;
    }
    assert false;
  }
  if(n/smallest_prime_divisor(n) < 1){
    assume(false);
    smallest_prime_divisor_l(n, 2, nat_of_int(n+1));

    quotient_positive(n, smallest_prime_divisor(n));
    assert n/smallest_prime_divisor(n) == 0;
    mul_subst(n/smallest_prime_divisor(n), 0, smallest_prime_divisor(n));

    assert n == 0;
    assert false;
  }
}

lemma void prime_factor_decomposition_l(int n, nat bound) 
requires int_of_nat(bound) > n &*& n >= 1;
ensures prod_list(prime_factor_decomposition(n, bound)) == n;
{
  switch(bound) {
    case zero: assert false;
    case succ(p_bound): {
      if(n == 1){
        list<int> pfd = prime_factor_decomposition(n, bound);
        assert pfd == cons(1, nil);
        assert prod_list(pfd) == 1;
      } else { // n > 1
        list<int> pfd = prime_factor_decomposition(n, bound);
        
        up_to_prime_intro(n);
        smallest_prime_divisor_l(n, 2, nat_of_int(n-2+1));
        assert true == divide(n, smallest_prime_divisor(n));
        assume(n/smallest_prime_divisor(n) * smallest_prime_divisor(n) == n);
        assert n/smallest_prime_divisor(n) * smallest_prime_divisor(n) == n;
        assert smallest_prime_divisor(n) >= 2;
        
        prime_factor_rec(n, bound);
        
        prime_factor_decomposition_l(n/smallest_prime_divisor(n), p_bound);
      }
    }
  }
}

/*
lemma void prime_factor_decomposition_mult(int n1, int n2, nat bound1, nat bound2)
requires int_of_nat(bound1) > n1 &*& int_of_nat(bound2) > n2 &*& n1 >= 1 &*& n2 >= 1;
ensures prod_list(append(prime_factor_decomposition(n1, bound1), prime_factor_decomposition(n2, bound2))) == n1*n2;
{
  switch(bound1) {
    case zero: assert false;
    case succ(p_bound1): {
    
      list<int> pfd1 = prime_factor_decomposition(n1, bound1);
      list<int> pfd2 = prime_factor_decomposition(n2, bound2);
  
      switch(pfd1) {
        case nil: {
          assume(false);
          assert false;
        }
        case cons(hd, tl): {  
          if(n1 == 1) {
            assert n1*n2 == n2;
            assert prime_factor_decomposition(n1, bound1) == cons(1, nil);
            assert append(prime_factor_decomposition(n1, bound1), prime_factor_decomposition(n2, bound2)) == cons(1, prime_factor_decomposition(n2, bound2));
            prime_factor_decomposition_l(n2, bound2);
            assert prod_list(append(prime_factor_decomposition(n1, bound1), prime_factor_decomposition(n2, bound2))) == 1 * n2;
          } else {
            prime_factor_decomposition_l(n1, bound1);
            assert prod_list(pfd1) == n1;
            assert prod_list(pfd1) == hd * prod_list(tl);
            assert prod_list(tl) * hd == n1;
      
            assert hd == smallest_prime_divisor(n1);
            up_to_prime_intro(n1);
            smallest_prime_divisor_l(n1, 2, nat_of_int(n1-2+1));
            assert true == divide(n1, hd);
            divide_l(n1, hd);
            assert n1/hd*hd == n1;
      
            assert tl == prime_factor_decomposition(n1/hd, p_bound1);
            prime_factor_rec(n1, bound1);
            prime_factor_decomposition_mult(n1/hd, n2, p_bound1, bound2);
            assert prod_list(append(tl, pfd2)) == n1/hd*n2;
      
            assert append(pfd1, pfd2) == cons(hd, append(tl, pfd2));
            assert prod_list(append(pfd1, pfd2)) == hd * prod_list(append(tl, pfd2));
            assert prod_list(append(pfd1, pfd2)) == hd * (n1/hd*n2);
            mul_assoc(n2, n1/hd, hd);
            assert hd * (n1/hd*n2) == (hd*(n1/hd))*n2;
            mul_subst(n1, n1/hd*hd, n2);
            assert true;
          }
        }
      }
    }
  }
}

fixpoint bool coprime_dont_share_prime(int n1, int n2, int div)
{
  return list_contains(div, prime_factor_decomposition(n1, nat_of_int(n1+1))) == true ? 
    list_contains(div, prime_factor_decomposition(n2, nat_of_int(n2+1))) : 
    true;
}

lemma void coprime_dont_share_prime(int n1, int n2, nat bound)
requires coprime(n1, n2);
ensures true == up_to(bound, (coprime_dont_share_prime)(n1, n2));
{
  switch(bound) {
    case(zero): 
    case succ(p_n): {
      
    }
  }
}
*/

lemma void x_not_1(int n1, int n2, int x)
requires 0 == x%n1 &*& 0 == x%n2 &*& x < (n1*n2) &*& n1 > 0 &*& n2 > 0;
ensures x != 1;
{
  assert x != n1*n2;
  note(x != n1*n2);
  close protect(x != n1*n2);
  if(x == 1) {
    if(n1 > 1) {
      division_round_to_zero(1, n1);
      div_rem(1, n1);
      assert x%n1 == 1;
      assert false;
    }
    
    if(n2 > 1) {
      division_round_to_zero(1, n2);
      div_rem(1, n2);
      assert x%n2 == 1;
      assert false;
    }
    assert n1*n2 == 1;
    assert x == n1*n2;
    open protect(x != n1*n2);
  } else {
    open protect(x != n1*n2);
  }
}


lemma void divide_inside_paren(int n1, int n2, int n3, int n4, int a)
requires n1 * (n2*a) == n3 * (n4 * a) &*& n1 >= 0 &*& n2 >= 0 &*& n3 >= 0 &*& n4 >= 0 &*& a > 0;
ensures n1 * n2 == n3 * n4;
{
  mul_assoc(a, n2, n1);
  mul_assoc(a, n4, n3);
  if(n1*n2 != n3*n4) {
    mul_nonnegative(n1, n2);
    mul_nonnegative(n3, n4);
    mul_subst_neq(n1*n2, n3*n4, a);
  }
}

lemma void mod_multiple(int n1, int n2)
requires n1 >= 0 &*& n2 > 0;
ensures 0 == (n1*n2)%n2;
{
  div_multiple(n1, n2);
  assert n1*n2/n2 == n1;

  int k = n1*n2;
  div_rem(k, n2);
  assert k == k/n2*n2 + k%n2;
  
  assert k == n1*n2 + k%n2;
}

lemma void gcd_mul(int n1, int n2, int n3)
requires coprime(n1, n3) &*& coprime(n2, n3) &*& n1 > 0 &*& n2 > 0 &*& n3 > 0;
ensures coprime(n1*n2, n3) &*& coprime(n1, n3) &*& coprime(n2, n3);
{
  assume(false);
  int gcd = gcd(n1*n2, n3);
  mul_positive(n1, n2);
  gcd_geq_1(n1*n2, n3);
  
  if(gcd != 1) {
    div_rem(n1*n2, gcd);
    assert n1*n2 == (n1*n2)/gcd*gcd + (n1*n2)%gcd;
    close protect(n1*n2 == (n1*n2)/gcd*gcd + (n1*n2)%gcd);
    
    gcd_divide(n1*n2, n3);
    assert n1*n2%gcd == 0;
    
    open protect(n1*n2 == (n1*n2)/gcd*gcd + (n1*n2)%gcd);
    assert n1*n2 == (n1*n2)/gcd*gcd;
    
    int k = (n1*n2)/gcd;
    assert n1*n2 == k*gcd;
    
    
    assert false;
  }
  close coprime(n1*n2, n3);
}

lemma void close_div_rem(int a, int b)
requires b != 0;
ensures protect(a == a/b*b + a%b);
{
  div_rem(a, b);
  close protect(a == a/b*b + a%b);
}

lemma void is_zero(int x)
requires x >= 0 &*& false == (x >= 1);
ensures x == 0;
{
}

// x = diff * step
lemma void bin_chinese_remainder_theorem_helper(int n1, int n2, int x, nat loop_counter)
requires coprime(n1, n2) &*& 0 == x%n1 &*& 0 == x % n2 &*& x < (n1*n2) &*& n1 > 0 &*& n2 > 0 &*& x >= 0 &*& n2 <= int_of_nat(loop_counter);
ensures x == 0 &*& coprime(n1, n2);
{
  switch(loop_counter) {
  case zero: {
    assert n2 > 0;
    assert int_of_nat(loop_counter) == 0;
    assert n2 <= 0;
    
    assert false;
  }
  
  case succ(p_loop_counter): {
 
  if(1 == x) { // contradiction
    x_not_1(n1, n2, x);
  } else {
    assert x >= 0;
    if(x > 1) {
      close_div_rem(x, n1);
      close_div_rem(x, n2);
    
      int k1 = x/n1;
      quotient_positive(x, n1);
      int k2 = x/n2;
      int alpha = k2;
      
      open protect(x == x/n1*n1 + x%n1);
      assert x == k1*n1;
      close protect(x == k1*n1);
      if(k1 == 0){
        assert k1*n1 == 0;
        open protect(x == k1*n1);
        assert x == 0;
        //close protect(x == k1*n1);
        open protect(x > 1);
        assert false;
      } else {
        open protect(x == k1*n1);
      }
      open protect(x == x/n2*n2 + x%n2);
      assert x == k2*n2;
      close protect(x == k2*n2);
      assert k1*n1 == k2*n2;
    
      close_div_rem(k1, n2);
      open protect(k1 == k1/n2*n2 + k1%n2);
      note(k1 == k1/n2*n2 + k1%n2);
      close protect(k1 == k1/n2*n2 + k1%n2);
      
      int beta = k1/n2;
      assert k1 == n2*beta + k1%n2;
      note(k1 == n2*beta + k1%n2);
      
      if(k1%n2 == 0) {
        if(beta == 0) { // Prove that x == 0
          assert n2*beta == 0;
          assert k1%n2 == 0;
          assert beta == k1/n2;
          open protect(k1 == k1/n2*n2 + k1%n2);
          assert k1 == n2*beta + k1%n2;
          assert k1 == 0;
          open protect(x == k1*n1);
          assert x == k1*n1;
          assert x == 0*n1;
          assert x == 0;
        } else { // contradiction
          quotient_positive(x, n1);
          quotient_positive(x/n1, n2);
          assert beta >= 1;
          assert k1 == n2*beta;
          mul_mono(1, beta, n2);
          assert k1 >= n2;
          mul_mono(n2, k1, n1);
          assert x >= n1*n2;
          assert false;
        }
      } else { // k1%n2 != 0
        int a = gcd(k1, n2);
        quotient_positive(x, n1);
        gcd_geq_1(k1, n2);
        div_rem(n2, a);
        int b = n2/a;
        quotient_positive(n2, a);
        close protect(n2 == b* a + n2%a);
        assert n2 == b * a + n2%a;
        gcd_divide(k1, n2);
        assert n2%a == 0;
        open protect(n2 == b * a + n2%a);
        assert n2 == b * a;
        close protect(n2 == b*a);
        close protect(n2 == b* a + n2%a);
        note(n2 == b*a);
        if(b <= 0) {
          assert b*a == 0;
          open protect(n2 == b*a);
          assert n2 == b * a;
          assert false;
        }
        
        div_rem(k1, a);
        int gamma = k1/a;
        quotient_positive(k1, a);
        assert k1 == gamma * a;
        note(k1 == gamma * a);
        close protect(k1 == gamma * a);
        close protect(k1 == gamma * a);
        if(gamma <= 0)
        {
          assert gamma * a == 0;
          open protect(k1 == gamma * a);
          assert k1 == gamma * a;
          assert false;
        } else {
          open protect(k1 == gamma * a);
        }
       
        if(gcd(gamma, b) != 1)
        {
          int gcd = gcd(gamma, b);
          open protect(b >= 1);
          assert b >= 1;
          gcd_geq_1(gamma, b);
          gcd_divide(gamma, b);
          assert b%gcd == 0;
          close_div_rem(b, gcd);
          open protect(b == b/gcd*gcd + b%gcd);
          assert b == b/gcd*gcd + b%gcd;
          assert b == b/gcd*gcd;
          
          close_div_rem(gamma, gcd);
          open protect(gamma == gamma/gcd*gcd + gamma%gcd);
          assert gamma == gamma/gcd*gcd;
          
          assert k1 == a * (gamma/gcd * gcd);
          assert k1 == gamma/gcd * gcd * a;
          assert n2 == a * (b/gcd * gcd);
          mul_mono_strict(1, gcd, a);
          assert a*gcd > a;
          close_mul_assoc(gamma/gcd, gcd, a);
          open protect((gamma/gcd) * gcd * a == gcd * a * (gamma/gcd));
          assert true == ((gamma/gcd) * gcd * a == gcd * a * (gamma/gcd));
          assert k1 == gcd * a * (gamma/gcd);
          assert gamma >= 0;
          assert gcd > 0;
          quotient_positive(gamma, gcd);
          div_multiple(gamma/gcd, gcd * a);
          assert true == divide(k1, gcd * a);
          
          close_mul_assoc(b/gcd, gcd, a);
          open protect((b/gcd) * gcd * a == gcd * a * (b/gcd));
          assert n2 == a * gcd * (b/gcd);
          quotient_positive(b, gcd);
          div_multiple(b/gcd, gcd*a);
          assert true == divide(n2, gcd * a);
          
          gcd_holds(k1, n2, gcd*a);
          assert false;
          
          
        } else {
          open protect(b >= 1);
        }
        open protect(x == k1*n1);
        close protect(k1 == gamma * a);
        open protect(x == k2*n2);
        assert k1 * n1 == k2 * n2;
        assert n2 == b * a;
        close protect(n2 == b*a);
        quotient_positive(x, n2);
        mul_subst(n2, b*a, k2);
        assert k1 * n1 == k2 * (b * a);
        assert n1 * (gamma * a) == k2 * (b * a);
        divide_inside_paren(n1, gamma, k2, b, a);
        assert n1 * gamma == k2 * b;
        if(gcd(n1, b) != 1) {
          int gcd = gcd(n1, b);
          gcd_geq_1(n1, b);
          gcd_divide(n1, b);
          
          close_div_rem(n1, gcd);
          open protect(n1 == n1/gcd*gcd + n1%gcd);
          close_div_rem(b, gcd);
          open protect(b == b/gcd*gcd + b%gcd);
          
          assert true == divide(n1, gcd);
          assert true == divide(b, gcd);
          
          if(false == divide(n2, gcd)){
            int k = b/gcd;
            gcd_geq_1(n1, b);
            quotient_positive(b, gcd);
            assert k >= 0;
            assert n2 == a*b;
            assert b == b/gcd*gcd;
            mul_subst(b, k*gcd, a);
            mul_assoc(gcd, k, a);
            assert n2 == a*k*gcd;
            mul_nonnegative(a, k);
            div_multiple(a*k, gcd);
            
            assert n2/gcd*gcd == n2;
            
            assert false;
          }
          assert true == divide(a*b, gcd);
          open coprime(n1, n2);
          assert gcd(n1, n2) == 1;
          close coprime(n1, n2);
          assert gcd > gcd(n1, n2);
          
          gcd_holds(n1, n2, gcd);
          
          assert false;
        }
        if(a == 1) {
          if(b != n2) {
            open protect(n2 == b*a);
            assert n2 == b * a;
            assert false;
          } else {
            open protect(n2 == b*a);
          }
          assert b == n2;
          
          if(gamma != k1) {
            open protect(k1 == gamma * a);
            assert k1 == gamma * a;
            assert false;
          } else {
            open protect(k1 == gamma * a);
          }
          assert gamma == k1;
          assert gcd(gamma, b) == 1;
          close(coprime(gamma, b));
          assert gcd(n1, b) == 1;
          gcd_mul(n1, gamma, b);
          open(coprime(n1*gamma, b));
          assert gcd(n1*gamma, b) == 1;
          assert n1*gamma == x;
          assert x%n2 == 0;
          if(x == 0)
          {
          } else {
            assert x == k2*n2;
            if(gcd(x, n2) < n2) {
              assert true == divide(x, n2);
              gcd_holds(x, n2, n2);
              divide_itself(n2);
              assert true == divide(n2, n2);
              assert false;
            }
            assert gcd(x, n2) >= n2;
          }
        } else { // a != 1
          open protect(n2 == b*a);
          open protect(k1 == gamma * a);
          open protect(k1 == gamma * a); // Dunno why it is twice here ?? oO
          
          assert gcd(n1, b) == 1;
          close coprime(n1, b);
          assert coprime(n1, b);
          
          assert k2*b == n1*gamma;
          mod_multiple(gamma, n1);
          mod_multiple(k2, b);
          
          if(k2*b >=  n1*b)
          {
            mul_mono(n1*b, k2*b, a);
            assert k2*b*a >= n1*b*a;
            assert b*a == n2;
            mul_subst(b*a, n2, k2);
            assert b*a*k2 == k2*n2;
            mul_assoc(k2, b, a);
            assert k2*b*a == k2*n2;
            
            mul_subst(b*a, n2, n1);
            mul_assoc(n1, b, a);
            assert k2*n2 >= n1*n2;
            assert x >= n1*n2;
            assert false;
          }
          
          if(k2*b < 0)
          {
            assert a > 0;
            mul_negative(k2*b, a);
            assert k2*b*a < 0;
            mul_assoc(k2, b, a);
            assert k2*b*a == k2*n2;
            assert false;
          }
          
          open protect(k1 == k1/n2*n2 + k1%n2);
          
          assert coprime(n1, b);
          assert a*b == n2;
          assert a > 1;
          mul_mono_strict(1, a, b);
          assert b < n2;
          assert b <= n2 - 1;
          assert int_of_nat(p_loop_counter) >= b;
          bin_chinese_remainder_theorem_helper(n1, b, k2*b, p_loop_counter);
          assert k2*b == 0;
          mul_subst(k2*b, 0, a);
          assert k2*b*a == 0;
          assert n2 == b * a;
          mul_subst(n2, b*a, k2);
          mul_assoc(k2, b, a);
          assert k2*n2 == 0;
          assert x == 0;
        } // end of if(a == 1) else 
      } // end if (k1%n2 == 0) else
    } // end if(x > 1);
  } // end if(x == 1) else;
  assert x != 1;
  assert false == (x > 1);
  assert false == (x >= 1);
  assert x >= 0;
  is_zero(x);
  assert x == 0;
  } // End of case succ(p_loop_counter);
  } // End of switch
}


// x = diff * step
lemma void bin_chinese_remainder_theorem(int n1, int n2, int x)
requires coprime(n1, n2) &*& 0 == x%n1 &*& 0 == x % n2 &*& x < (n1*n2) &*& n1 > 0 &*& n2 > 0 &*& x >= 0;
ensures x == 0 &*& coprime(n1, n2);
{
  bin_chinese_remainder_theorem_helper(n1, n2, x, nat_of_int(n2));
}

#endif 
